#: Cursor customization {{{

#: Default cursor color

# cursor_shape block

#: The cursor shape can be one of (block, beam, underline)

cursor_blink_interval      0.5
# cursor_stop_blinking_after 15.0

#: The interval (in seconds) at which to blink the cursor. Set to zero
#: to disable blinking. Note that numbers smaller than repaint_delay
#: will be limited to repaint_delay. Stop blinking cursor after the
#: specified number of seconds of keyboard inactivity. Set to zero to
#: never stop blinking.

#: }}}

#: Scrollback {{{

# scrollback_lines 2000

#: Number of lines of history to keep in memory for scrolling back.
#: Memory is allocated on demand.

# scrollback_pager less --chop-long-lines --RAW-CONTROL-CHARS +INPUT_LINE_NUMBER

#: Program with which to view scrollback in a new window. The
#: scrollback buffer is passed as STDIN to this program. If you change
#: it, make sure the program you use can handle ANSI escape sequences
#: for colors and text formatting. INPUT_LINE_NUMBER in the command
#: line above will be replaced by an integer representing which line
#: should be at the top of the screen.

# wheel_scroll_multiplier 5

#: Modify the amount scrolled by the mouse wheel or touchpad. Use
#: negative numbers to change scroll direction.

#: }}}

#: Mouse {{{

# url_color #0087BD
# url_style curly

#: The color and style for highlighting URLs on mouse-over. url_style
#: can be one of: none, single, double, curly

# open_url_modifiers kitty_mod

#: The modifier keys to press when clicking with the mouse on URLs to
#: open the URL

# open_url_with default

#: The program with which to open URLs that are clicked on. The
#: special value default means to use the operating system's default
#: URL handler.

# copy_on_select no

#: Copy to clipboard on select. With this enabled, simply selecting
#: text with the mouse will cause the text to be copied to clipboard.
#: Useful on platforms such as macOS/Wayland that do not have the
#: concept of primary selections. Note that this is a security risk,
#: as all programs, including websites open in your browser can read
#: the contents of the clipboard.

# rectangle_select_modifiers ctrl+alt

#: The modifiers to use rectangular selection (i.e. to select text in
#: a rectangular block with the mouse)

# select_by_word_characters :@-./_~?&=%+#

#: Characters considered part of a word when double clicking. In
#: addition to these characters any character that is marked as an
#: alpha-numeric character in the unicode database will be matched.

# click_interval 0.5

#: The interval between successive clicks to detect double/triple
#: clicks (in seconds)

# mouse_hide_wait 3.0

#: Hide mouse cursor after the specified number of seconds of the
#: mouse not being used. Set to zero to disable mouse cursor hiding.

# focus_follows_mouse no

#: Set the active window to the window under the mouse when moving the
#: mouse around

#: }}}

#: Window layout {{{

# remember_window_size  yes
# initial_window_width  640
# initial_window_height 400

remember_window_size no
initial_window_width 700
initial_window_height 500

#: If enabled, the window size will be remembered so that new
#: instances of kitty will have the same size as the previous
#: instance. If disabled, the window will initially have size
#: configured by initial_window_width/height, in pixels. You can use a
#: suffix of "c" on the width/height values to have them interpreted
#: as number of cells instead of pixels.

enabled_layouts *

#: The enabled window layouts. A comma separated list of layout names.
#: The special value * means all layouts. The first listed layout will
#: be used as the startup layout. For a list of available layouts, see
#: the layouts.

# window_resize_step_cells 2
# window_resize_step_lines 2

#: The step size (in units of cell width/cell height) to use when
#: resizing windows. The cells value is used for horizontal resizing
#: and the lines value for vertical resizing.

window_border_width 1

#: The width (in pts) of window borders. Will be rounded to the
#: nearest number of pixels based on screen resolution. Note that
#: borders are displayed only when more than one window is visible.
#: They are meant to separate multiple windows.

window_margin_width 0

#: The window margin (in pts) (blank area outside the border)

# single_window_margin_width -1000.0

#: The window margin (in pts) to use when only a single window is
#: visible. Negative values will cause the value of
#: window_margin_width to be used instead.

window_padding_width 14

#: The window padding (in pts) (blank area between the text and the
#: window border)
# active_border_color #282c34

#: The color for the border of the active window
# inactive_border_color #22262d

#: The color for the border of inactive windows

# bell_border_color #ff5a00

#: The color for the border of inactive windows in which a bell has
#: occurred

inactive_text_alpha 1.0

#: Fade the text in inactive windows by the specified amount (a number
#: between zero and one, with zero being fully faded).

#: }}}

#: Tab bar {{{

# tab_bar_edge bottom

#: Which edge to show the tab bar on, top or bottom

tab_bar_margin_width 4

#: The margin to the left and right of the tab bar (in pts)

tab_bar_style fade

#: The tab bar style, can be one of: fade or separator. In the fade
#: style, each tab's edges fade into the background color, in the
#: separator style, tabs are separated by a configurable separator.

# tab_fade 0.25 0.5 0.75 1
tab_fade 1 1 1

#: Control how each tab fades into the background when using fade for
#: the tab_bar_style. Each number is an alpha (between zero and one)
#: that controls how much the corresponding cell fades into the
#: background, with zero being no fade and one being full fade. You
#: can change the number of cells used by adding/removing entries to
#: this list.

# tab_separator "  "


#: Tab bar colors and styles

#: }}}

# braille characters
symbol_map U+2800-U+28FF Symbola

# Tab management
map ctrl+tab            next_tab
map ctrl+shift+tab      previous_tab
# map ctrl+t              new_tab zsh
map ctrl+shift+t        new_tab zsh
map ctrl+shift+r        new_tab zsh -c 'ranger ~'
map ctrl+shift+w        close_tab
map ctrl+shift+l        next_layout
map ctrl+shift+f        move_tab_forward
map ctrl+shift+b        move_tab_backward
# Just as with new_window above, you can also pass the name of arbitrary
# commands to run when using new_tab.

# Miscellaneous
map ctrl+plus               increase_font_size
map ctrl+minus              decrease_font_size
map ctrl+shift+backspace    restore_font_size
map ctrl+shift+f11          toggle_fullscreen

map alt+y copy_to_clipboard
# map ctrl+p paste_from_clipboard
map alt+p paste_from_clipboard
map ALT+v pipe @screen window nvim -Rmn

# include colorscheme.conf



# BEGIN_KITTY_THEME
# Kanagawa
include current-theme.conf
# END_KITTY_THEME

# BEGIN_KITTY_FONTS
font_family      family="Hack Nerd Font"
bold_font        auto
italic_font      auto
bold_italic_font auto
# END_KITTY_FONTS

font_size 12.0
confirm_os_window_close 0
